-------------0727-----------------
연산자

제어구문 : if, switch
반복구문 :  for, while, do-while

-------------------0803-------------------
* 캡슐화

* 다형성
	- 메소드 오버로딩 : 같은 이름의 매개변수 다른 메소드 생성 가능

	- 메소드 오버라이딩 : 부모 클래스로부터 상속받은 메소드를 자식 클래스에서 재정의


* 생성자 메소드


* 객체의 치환
객체가 복사되는 것이 아니고 레퍼런스가 복사된다.
garbage 발생 가능

* static
- static 변수: 고정 값 -> 한번 바뀌면 고정 
- 모든 객체가 메모리를 공통으로 공유


-----------------0808------------------

* is a -> 상속의 관계
- 상속 받아서 쓰는 거 (extends)

* has a -> 포함의 관계
- 인스턴스화로 상속받는 거 (~~~ ~~ = new ~~~~)

* protected
- 같은 패키지 사용 o
- 다른 패키지 = 상속 받아서 사용해야됨. (import)

* 업캐스팅
- 서브 클래스 객체를 슈퍼 클래스 타입으로 타입 변환

* 다운캐스팅
- 


* 오버로딩
- 

* 오버라이딩
- 

-----------------0809--------------------

* 추상 메소드
- 선언되어 있으나 구현은 x, abstract로 선언
- 서브 클래스에서 오버라이딩 해야함

* 추상 클래스
- 추상 메소드를 하나라도 가진 클래스
- 추상 메소드가 없지만 abstract로 선언된 클래스

* 인터페이스
- 

-------------0810--------------

* 어노니머스(익명)
- 이름이 정해지지 않은 것. ??

* Wrapper 클래스
- 기본 타입의 값을 객체로 다룰 수 있게 함.
- ex) int ->Integer(박싱) ,        Integer -> int(언박싱)
- 

------------0811------------------
* try - catch - finally문

- try : 예외 발생할 가능성이 있는 문장들을 넣는다.
- catch : 예외 발생 시 실행.
- finally : 무조건 실행됨.

-----------0812----------------
* 큐
- FIFO
- 
* 스택
- LIFO
-

* 리스트
	*ArrayList 

* 벡터
- 크기가 마음대로 조절됨 <---> 배열은 크기 고정됨
- 

* HashMap<Key, Value>
- 인덱스에 빠르게 접근

* hasNext() VS next()
- hasNext() : boolean 타입으로 반환

- next(): iterator의 다음 요소 값 반환
	  아무 타입 가능















